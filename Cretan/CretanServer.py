#!/usr/bin/env python3
###############################################################################
# NAME:             CretanServer.py
#
# AUTHOR:           Ethan D. Twardy <edtwardy@mtu.edu>
#
# DESCRIPTION:      Contains the main method for the Cretan Server application
#
# CREATED:          01/24/2019
#
# LAST EDITED:      03/25/2020
###

import sys

# Google
import firebase_admin
from firebase_admin import credentials

# CretanServer
from NetworkUtils import Server
import DownstreamMessaging
# See `ServiceAccountKey.py-Format.md'
from ServiceAccountKey import ServiceAccountKey

###############################################################################
# Globals
###

deviceTokens = {}

###############################################################################
# CretanSession
###

class CretanSession:
    """Handles incoming connections as sessions."""

    def __init__(self, clientSock, address, logfn=print):
        self.clientSock = clientSock
        self.address = address
        self.logfn = logfn

    def handle(self):
        """Handle the client connection."""
        arguments = self.clientSock.recv(2048).decode().split('\n')
        if arguments[0] == 'REGISTER':
            deviceName = 'device' + str(len(deviceTokens))
            deviceTokens[deviceName] = arguments[1]
            self.clientSock.send(bytes(b"OK"))
            self.logfn('Registered {}'.format(deviceName))
        elif arguments[0] == 'SEND_MESSAGE':
            self.logfn('Sending message "{}" to device "{}"'
                       .format(arguments[2], arguments[1]))
            self.clientSock.send(bytes(b"OK"))
            # token = deviceTokens[arguments[1]]
            # messenger = DownstreamMessaging.Messenger(token)
            # code = messenger.sendMessage('Cretan', arguments[2])
            # self.logfn('Return code: {}'.format(code))
        else:
            self.logfn('Received invalid command "{}"'.format(arguments[0]))

###############################################################################
# CretanSessionFactory
###

class CretanSessionFactory:
    """Factory for session instances."""

    def __init__(self):
        return

    def make(self, clientSock, address, logfn=print):
        """Create a Session instance"""
        return CretanSession(clientSock, address, logfn)

###############################################################################
# MAIN
###

class Logger:
    def __init__(self, fileObj):
        self.fileObj = fileObj

    def log(self, message):
        """The log function for the server"""
        self.fileObj.write(message + '\n')
        self.fileObj.flush()

def main():
    # This module is not under version control to protect the integrity of my
    # private account key. This module must be generated by the user per the
    # specifications in `ServiceAccountKey.py-Format.md' in order for the
    # server application to function correctly.
    keyLocation = ServiceAccountKey.getPath()
    cred = credentials.Certificate(keyLocation)
    firebase_admin.initialize_app(cred)

    defaultPort = 13001
    factory = CretanSessionFactory()
    theLogger = Logger(sys.stderr)
    theLogger.log('Welcome to Cretan!')
    with Server(defaultPort, factory, logfn=theLogger.log) as server:
        server.run()

if __name__ == '__main__':
    main()

##############################################################################
